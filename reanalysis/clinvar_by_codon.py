"""
Method file for re-sorting clinvar annotations by codon

This makes the assumption that the annotated data here
has been generated by summarise_clinvar_entries.py:

- SNV only
- Clinvar Pathogenic only
- ClinVar decision/alleles/gold stars are in INFO
"""

import click
import hail as hl


@click.command()
@click.option('--mt', help='Path to the annotated MatrixTable')
@click.option('--write_path', help='Path to the annotated MatrixTable')
def protein_indexed_clinvar(mt: hl.MatrixTable, write_path: str):
    """
    takes a MatrixTable of annotated Clinvar Variants
    re-annotates these loci with the latest in-house decisions
    reduces dataset to only pathogenic

    re-indexes the data to be queryable on Transcript and Codon
    writes the resulting Table to the specified path

    Prototyped and executed in a notebook

    Args:
        mt (): MatrixTable of Clinvar variants with VEP anno.
        write_path (): location to write new file to
    """

    # 1. retain only relevant annotations
    mt = mt.rows()
    mt = mt.select(tx_csq=mt.vep.transcript_consequences, info=mt.info)

    # 2. split rows out to separate transcript consequences
    mt = mt.explode_rows(mt.tx_csq)

    # 3. filter down to missense
    # a reasonable filter here would also include MANE transcripts
    mt = mt.filter(mt.tx_csq.consequence_terms.contains('missense_variant'))

    # 4. squash the clinvar and protein content into single strings
    mt = mt.annotate(
        clinvar_entry=hl.str('::').join(
            [
                hl.str(mt.info.allele_id),
                mt.info.clinical_significance,
                hl.str(mt.info.gold_stars),
            ]
        ),
        newkey=hl.str('::').join(
            [
                mt.tx_csq.protein_id,
                hl.str(mt.tx_csq.protein_start),
            ]
        ),
    )

    # 5. re-key table on transcript & residue
    mt = mt.key_by(mt.newkey)

    # 6. collect all ClinVar annotations at each residue
    mt = mt.select(mt.clinvar_entry).collect_by_key()

    # 7. squash the multiple clinvar entries back to a single string
    mt = mt.transmute(
        clinvar_alleles=hl.str('+').join(
            hl.set(hl.map(lambda x: x.clinvar_entry, mt.values))
        )
    )

    # 8. write the table of all ENSP:residue#: Clinvar[+Clinvar,]
    mt.write(write_path, overwrite=True)


if __name__ == '__main__':
    protein_indexed_clinvar()  # pylint: disable=no-value-for-parameter
