[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name='talos'
description='Centre for Population Genomics Variant Prioritisation'
readme = "README.md"
version='6.6.1'
license={ "file" = "LICENSE" }
classifiers=[
    'Environment :: Console',
    'Intended Audience :: Science/Research',
    'License :: OSI Approved :: MIT License',
    'Natural Language :: English',
    'Operating System :: MacOS :: MacOS X',
    'Operating System :: POSIX',
    'Operating System :: Unix',
    'Programming Language :: Python',
    'Topic :: Scientific/Engineering',
    'Topic :: Scientific/Engineering :: Bio-Informatics',
]

dependencies=[
    "cloudpathlib[all]>=0.16.0",
    "cyvcf2>=0.30.18",
    "dill>=0.3.7",
    "hail==0.2.133",
    "httpx>=0.27.0",
    "Jinja2>=3.1.3",
    "networkx>=3",
    "obonet>=1",
    "pandas>=2",
    "peds>=1.2.0",
    "phenopackets>=2",
    "protobuf==3.20.2",
    "pydantic>=2.5.2",
    "pyspark>=3.5.1",
    "python-dateutil>=2",
    "semsimian",
    "tabulate>=0.8.9",
    "tenacity>=9.0.0",
    "toml==0.10.2",
]


[project.optional-dependencies]
cpg = [
    "gql",
    "metamist>=7.4.0",
]
test = [
    "bump2version>=1.0.1",
    "pytest>=8",
    "pytest-cov>=3.0.0",
    "pytest-httpx",
    "pytest-xdist>=3.6.0",
]

[project.scripts]
# for use in translating a VEP annotated VCF to a MatrixTable
VcfToMt = 'talos.VcfToMt:cli_main'
# turns the SVDB TSV into a Hail Table
ConvertSpliceVarDb = 'talos.ConvertSpliceVarDb:cli_main'
# CPG internal, scans database for published reports, collects into an index page
BuildReportIndexPage = 'talos.CPG.BuildReportIndexPage:main'
# CPG implementation, builds cohort phenopackets
MakePhenopackets = 'talos.CPG.MakePhenopackets:cli_main'
# CPG implementation, builds cohort phenopackets from a pedigree with HPO terms
ConvertPedToPhenopackets = 'talos.CPG.convert_ePED_to_phenopackets:cli_main'
# use the HPO terms to select panels for this analysis
GeneratePanelData = 'talos.GeneratePanelData:cli_main'
# query PanelApp for those selected panels
QueryPanelapp = 'talos.QueryPanelapp:cli_main'
# use API queries to find the gene symbol for each gene ID
FindGeneSymbolMap = 'talos.FindGeneSymbolMap:cli_main'
# Filter and label a small-variant MatrixTable
RunHailFiltering = 'talos.RunHailFiltering:cli_main'
# Filter and label a SV MatrixTable
RunHailFilteringSV = 'talos.RunHailFilteringSV:cli_main'
# Run each of the category-labelled variants through MOI filters
ValidateMOI = 'talos.ValidateMOI:cli_main'
# catch variants which have strong phenotypic matches
HPOFlagging = 'talos.HPOFlagging:cli_main'
# CPG internal (?), publish those results as an HTML report
CreateTalosHTML = 'talos.CreateTalosHTML:cli_main'
# CPG internal (?), generate a file for ingestion by Seqr
MinimiseOutputForSeqr = 'talos.MinimiseOutputForSeqr:cli_main'
# CPG internal (?), generate a JSON summary of an existing report
SummariseReport = 'talos.SummariseReport:cli_main'

[project.urls]
Repository = "https://github.com/populationgenomics/talos"

[tool.setuptools]
package-dir = {"" = "src"}

[options]
include_package_data = true

[options.package_data]
'talos'=  ['templates/*.jinja', 'example_config.toml']

[tool.black]
line-length = 120
skip-string-normalization = true
exclude = '''
/(
  venv
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ['test']

[tool.ruff]
line-length = 120
extend-exclude = ["venv", ".mypy_cache", ".venv", "build", "dist"]

[tool.ruff.lint]
# ignore pydocstyle, flake8-boolean-trap (FBT)
select = ["A", "B", "C", "E", "F", "G", "I", "N", "Q", "S", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "ERA", "EXE", "ICN", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "UP", "YTT"]

fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "ERA", "EXE", "FBT", "ICN", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "UP", "YTT"]

ignore = [
    "ANN001", # Missing type annotation for function argument
    "ANN101", # Missing type annotation for self in method
    "ANN102", # Missing type annotation for `cls` in classmethod
    "ANN201", # Missing return type annotation for public function
    "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
    "ANN204", # Missing type annotation for special method `__init__`
    "E731", # Do not assign a lambda expression, use a def
    "G004", # Logging statement uses f-string
    "PLW0603", # Using the global statement to update `<VAR>` is discouraged
    "Q000", # Single quotes found but double quotes preferred
    "S101", # Use of assert detected
    "PLR0912", # Too many branches (> 12)
    "PLR0913", # Too many arguments in function (> 5)
    "C901", # method is too complex (> 10 conditions)
    "N999", # invalid module name (not lower-case and potholes)
    "I001", # Import block is un-sorted or un-formatted (to remove soon)
]

[tool.ruff.format]
indent-style = 'space'
quote-style = "single"

[tool.ruff.lint.isort]
section-order = ["future", "standard-library", "third-party", "hail", "cpg", "first-party", "local-folder"]

[tool.ruff.lint.isort.sections]
cpg = ["metamist", "talos"]
hail = ["hail", "hailtop"]
